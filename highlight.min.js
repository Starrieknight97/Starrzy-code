(function($, window, hljs){
    var painters = 1,
        waitForLoad = false;

    // hey Van Gogh!
    $.fn.vanGogh = function(options){
        var defaults = {
            language: "auto",
            firstLine: 1,
            numbering: true,
            tab: "    ",
            hljs: "",
            highlight: null
        };
        // merge defaults and passed options
        options = $.extend({}, defaults, options);
        
        // scope vars
        var elems = this,
            run = 0,
            currentHash = window.location.hash;
        
        // cross-browser compatible selection
        function selectCode(elm) {
            var w = window,
                d = window.document;
            elm = elm || container[0];
            if (d.body.createTextRange) {
                var range = d.body.createTextRange();
                range.moveToElementText(elm);
                range.select();
            } else if (w.documentCreateRange) {
                var sel = w.getSelection(),
                    range = d.createRange();
                range.selectNodeContents(elm);
                sel.removeAllRanges();
                sel.addRange(range);
            } else if (window.getSelection) {
                var sel = w.getSelection();
                sel.setBaseAndExtent(elm, 0, elm, 1);
            }
        }
        
        // this function puts Van Gogh into action
        function paint() {
            // check if we're waiting for autoload
            if (waitForLoad) {
                setTimeout(paint, 100);
                return;
            }
            run++;
            // abort if run 10 times or more
            if (run >= 10) { return; }
            hljs = hljs || window.hljs;
            if (!hljs) {
                // autoload highlight.js
                waitForLoad = true;
                $.getScript(options.hljs+"/highlight.pack.js", function(){
                    waitForLoad = false;
                    paint();
                });
                return;
            }
            // iterate passed elements
            elems.each(function(){
                var self = $(this)
                        .addClass("vg-container")
                        .attr("id", this.id || "vg-"+painters++),
                    id = this.id,
                    inline = false,
                    lastClicked = false;
                
                // container can be self or code element inside current
                var container = self.find("code");
                if (container.length == 0) {
                    container = self;
                    inline = true;
                }
                // copy the original text
                var original = container.text();
               
                // fire off highlight.js
                hljs.highlightBlock(container[0], options.tab);
                
                // split the result into lines so that we can process them
                var lines = container.html().split("\n"),
                    numbers = "",
                    code = "";
                
                // highlight a line
                function highlight(num, clear, initial){
                    var oldHash = window.location.hash.substring(1),
                        addHash = "",
                        range = false,
                        lines = self.find(".vg-line");
                    
                    // clear all previous highlights
                    if (clear) {
                        // remove class
                        self.find(".vg-highlight").removeClass("vg-highlight");
                        // remove from hash
                        oldHash = oldHash.replace(new RegExp('([#]?'+id+'-[0-9]+[,]?)','g'), "");
                    }
                    
                    // check for range in string
                    if (typeof num === "string") {
                        var match = num.match(/^([0-9]+)-([0-9]+)$/);
                        if (match) {
                            num = [];
                            var from = match[1], to = match[2];
                            for (var i = from; i <= to; i++) {
                                num.push(i);
                            }
                            // TODO: ranges in hash
                            //range = true;
                            //addHash += ','+id+'-'+from+'-'+to;
                        }
                    }
                    
                    $.each(num, function(){
                        var lineId = id+'-'+this,
                            line = lines.filter('#'+lineId);
                            
                        // line found
                        if (line.length) {
                            line.addClass("vg-highlight");
                            if (!range) { addHash += ','+lineId; }
                        }
                    });
                    // add hash
                    if (!initial) {
                        window.location.hash = oldHash.length ?
                            '#'+oldHash+addHash :
                            '#'+addHash.substring(1);
                    }
                }
                
                // if not inline and there are multiple lines
                if (!inline) {
                    // iterate the lines
                    $.each(lines, function(i, line){
                        var num = i+options.firstLine,
                            lineId = id+'-'+num;
                        // if numbering is enabled, add number to gutter
                        if (options.numbering) {
                            numbers += '<a class="vg-number" rel="#'+lineId+'">'+num+'</a>';
                        }
                        // wrap the line
                        code += '<div class="vg-line" id="'+lineId+'">'+line+'</div>';
                    });
                    // wrap all lines
                    code = '<code class="vg-code">'+code+'</code>';
                    // add gutter to container if numbering is enabled
                    if (options.numbering) { 
                        code = '<div class="vg-gutter">'+numbers+'</div>'+code;
                    }
                    // put new code in container
                    self.html(code);
                    // we want numbers to be clickable
                    self.find(".vg-number").click(function(e){  
                        var number = $(this),
                            rel = number.attr("rel"),
                            line = self.find(rel);
                        
                        // check if already highlighted
                        if (line.hasClass("vg-highlight")) {
                            var oldHash = window.location.hash,
                                newHash = oldHash;
                            // remove highlight
                            line.removeClass("vg-highlight");
                            // remove from hash
                            window.location.hash = oldHash.replace(
                                new RegExp('([#,]?'+rel.substring(1)+'[,]?)'),
                                ''
                            );
                            lastClicked = false;
                            return false;
                        }

                        var prevClicked = lastClicked;
                        lastClicked = rel.match(/-([0-9]+)$/)[1];
                        
                        // handle shift-click to allow selecting range
                        if (e.shiftKey && lastClicked) {
                            highlight(
                                prevClicked < lastClicked ?
                                    prevClicked+'-'+lastClicked :
                                    lastClicked+'-'+prevClicked,
                                true
                            );
                        } else {
                            // handle ctrl-click to allow multiple highlightings
                            highlight(lastClicked, e.ctrlKey ? false : true);
                        }
                        return false;
                    });
                    
                } else if (inline) {
                    self.addClass("vg-code");
                }
                
                // double-clicking the container will select all code (if supported)
                console.log(container,container.parent());
                container.dblclick(function(){
                    selectCode();
                    return false;
                });
                
                // highlight rows passed in options
                options.highlight && highlight(options.highlight, true, true);
                // highlight lines that exist in hash
                var hashLines = currentHash.match(new RegExp('('+id+'-[0-9]+)','g'));
                hashLines &&
                    self.find('#'+hashLines.join(",#")).each(function(i){
                        highlight(this.id.match(/-([0-9]+)$/)[1], (i === 0));
                    });
            });
        }
        // let the master begin
        paint();
        // return elements
        return elems;
    }
        
})(jQuery, this, (typeof this.hljs !== "undefined") ? this.hljs : false);
$(function() {
    var loadFrom = "https://noxdo-blogspot-com.googlecode.com/svn/trunk/noxdo.blogspot.com/";
    $("pre:eq(0)").vanGogh({ hljs: loadFrom });
    $("pre:eq(1), pre:eq(2)").vanGogh({ hljs: loadFrom, numbering: false });
    $("code.inline").vanGogh({ hljs: loadFrom, numbering: false });
});